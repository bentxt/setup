#!/bin/sh
#
# NAME
#
#   template - Template for shell scripts
#
# DESCRIPTION
#
#   Shell scripts that also can be used as modules/libraries for other scripts.
#   Fully posix compatible
#
# SYNOPSIS
#
#   template [OPTIONS] [filename], or run with --help
#
# OPTIONS
#
#   --help          show help
#

set -u

[ -z ${DEBUG+x} ] && DEBUG=

UTILS_POOL__STATE_DIR=


utils_pool__init() {

    local statedir="${XDG_STATE_DIR:-}"
    [ -z "$statedir" ] && statedir="$HOME/.local/state"

    UTILS_POOL__STATE_DIR="$statedir/utils_pool"
}

utils_pool__get_statedir_outputs() {
    local statedir="${1:-}"

    [ -z "$statedir" ] && statedir="$(utils_pool__get_statedir)"

    if ! [ -d "$statedir" ] ; then
        fail "invalid statedir '$statedir'"
        return 1
    fi

    local pool_statedir_outputs="$statedir/outputs"
    mkdir -p "$pool_statedir_outputs"
    prn "$pool_statedir_outputs"
}

utils_pool__get_outfile() {
    local dir="${1:-}"
    if ! [ -d "$dir" ] ; then
        fail invalid dir 
        return 1
    fi

    local fpath=
    for x in 1 2 3 4 5; do
        local secstamp=; secstamp="$(secstamp)"
        if [ -z "$secstamp" ] ; then
            fail no secstamp
            return 1
        fi
        fpath="$dir/$secstamp.txt"
        if [ -f "$fpath" ] ; then
            sleep 1
        else
            break
        fi

    done

    if [ -n "$fpath" ] ; then
        if [ -f "$fpath" ] ; then
            fail "could not create a new file"
            return 1
        else
            prn "$fpath"
        fi
    else
        fail"'could not create new fpath '$fpath'"
        return 1
    fi
}

utils_pool__clean_outputs() {
    local dir="${1:-}"
    if ! [ -d "$dir" ] ; then
        fail invalid dir 
        return 1
    fi

    local daystamp=; daystamp="$(date +'%Y%m%d')"

    for f in "$dir"/* ; do
        [ -f "$f" ] || continue
        local bf="${f##*/}"
        case "$bf" in
            ${daystamp}*) : ;;
            *) rm -f "$f" ;;
        esac
    done
}


utils_pool__run() {

    local input=
    while [ $# -gt 0 ]; do
        case "$1" in
        -*)
            info "invalid arg '$1', run --help"
            return 1
            ;;
        *)
            input="$1"
            shift
            break ;;
        esac
        shift
    done

    local state_dir="${UTILS_POOL__STATE_DIR:-}"
    if [ -z "$state_dir" ] ; then
        fail "no state dir"
        return 1
    fi

    mkdir -p "$state_dir"

    local state_dir_outputs=; state_dir_outputs="$(utils_pool__get_statedir_outputs "$state_dir")"
    if ! [ -d "$state_dir_outputs" ] ; then
        fail "invalid state_dir '$state_dir_outputs'"
        return 1
    fi

    utils_pool__clean_outputs "$state_dir_outputs"


    if [ -t 0 ]; then
        if [ -n "$input" ]  ; then
            echo iii $input
        else
            if [ -n "$(ls -A "$state_dir_outputs")" ]; then
                local latest=; latest="$(ls -t1  "$state_dir_outputs"/*  |  head -n 1)"
                local latestname="${latest##*/}"
                case "$latestname" in
                    [0-9]*.txt) cat "$latest" ;;
                    *)
                        fail "not a outfile in '$latestname'"
                        return 1
                    ;;
                esac
            else
                fail 'no output files found'
                return 1
            fi
        fi
    else
        local outfile=; outfile="$(utils_pool__get_outfile "$state_dir_outputs")"
        if [ -z "$outfile" ] ; then
            fail 'no outfile '
            return 1
        fi
        # perl -ne 'print'
        while read -r line ; do
            echo $line | tee -a "$outfile"
        done
        echo ----
        echo $outfile
    fi
}

### Prelude

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
warn() { echo "Warn: $*" >&2; }
info() { echo "$@" >&2; }

die() {
	echo "$@" >&2
	exit 1
}
abspath() {
	readlink -f "${1:-}" 2>/dev/null || {
		perl -MCwd=abs_path -e 'print abs_path($ARGV[0]);' "${1:-}"
	}
}

usage() {
	for regex in 's/^#+\s*//g; if($_ && $s){print "usage: $_"; exit 0; };  $s=1 if (/^SYNOPSIS\s*$/);' 'if (/^\s*#+\s*([uU]sage[a-z\s-_]*:.*)\s*/){print "$1"; $s=1; exit 0 ; };'; do
		perl -ne "${regex}"';END{exit 1 unless $s;}' "$0" >&2 && exit 1
	done
}

secstamp() { date +'%Y%m%d%H%M%S'; }
getos() { uname | tr '[:upper:]' '[:lower:]'; }
getlines() { wc -l <"${1:-}" | tr -d ' '; }
getnewfile() { case "$1" in */*) prn "${1%/*}/$2" ;; *) prn "$2" ;; esac }
getnewfilext() { getnewfile "$1" "$(basename "$1" "${1##*.}")$2"; }



main() {
	local argnum="$1"
	shift

	if [ $# -eq $argnum ]; then
		usage
		info "not enough args"
	fi

	while [ $# -gt 0 ]; do
		case "${1:-}" in
		-h | --help)
			perl -ne 'print "$1\n" if /^\s*#+\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
			exit 1
			;;
		-*) #die "Err: invalid arg"
			break
			;;
		*) break ;;
		esac
		shift
	done
}

### Modulino

if [ -z "${MAINSCRIPT:-}" ]; then
	MAINSCRIPT="$(abspath "$0")"
    [ -z "$MAINSCRIPT" ] && die "Err: could not set MAINSCRIPT"
	[ -t 0 ] && main -1 "${@}"
	utils_pool__init "${MAINSCRIPT%/*}" || die 'Abort init ...'
	utils_pool__run "$@" || die 'Abort run ...'
else
	utils_pool__init "${MAINSCRIPT%/*}" || {
		fail 'could not run init'
		return 1
	}
fi
