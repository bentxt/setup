#!/bin/sh
#
# NAME
#
#   template - Template for shell scripts
#
# DESCRIPTION
#
#   Shell scripts that also can be used as modules/libraries for other scripts.
#   Fully posix compatible
#
#
# SYNOPSIS
#
#   template [OPTIONS] [filename], or run with --help
#
# OPTIONS
#
#   --help          show help

set -eu

[ -z ${DEBUG+x} ] && DEBUG=

### Prelude

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
warn() { echo "Warn: $*" >&2; }
info() { echo "$@" >&2; }

die() {
	echo "$@" >&2
	exit 1
}
stamp() { date +'%Y%m%d%H%M%S'; }
absdir() (cd "${1}" && pwd -P)
abspath() {
	readlink -f "${1:-}" 2>/dev/null || {
		perl -MCwd=abs_path -e 'print abs_path($ARGV[0]);' "${1:-}"
	}
}

getos() { uname | tr '[:upper:]' '[:lower:]'; }
getlines() { wc -l <"${1:-}" | tr -d ' '; }
getnewfile() { case "$1" in */*) prn "${1%/*}/$2" ;; *) prn "$2" ;; esac }
getnewfilext() { getnewfile "$1" "$(basename "$1" "${1##*.}")$2"; }

usage(){
    for  regex in 's/^#+\s*//g; if($_ && $s){print "usage: $_"; exit 0; };  $s=1 if (/^SYNOPSIS\s*$/);' 'if (/^\s*#+\s*([uU]sage[a-z\s-_]*:.*)\s*/){print "$1"; $s=1; exit 0 ; };'; do
        perl -ne "${regex}"';END{exit 1 unless $s;}'  "$0" >&2 && exit 1 
    done
}

utils_template__init() {
    local maindir="${1:-}"
    if ! [ -d "${maindir}" ]; then
        fail "invalid maindir  '${maindir}'"
        return 1
    fi
}

utils_template__run() {

	local input=
	while [ $# -gt 0 ]; do
		case "$1" in
		-*)
			info "invalid arg '$1', run --help"
			return 1
			;;
		*)
			input="$1"
			shift
			break
			;;
		esac
		shift
	done

	echo nnn $(getnewfile $input 'lol')
	echo ffffff $(getnewfilext $input 'lol')

	if [ -t 0 ]; then
		if ! [ -f "$input" ] || [ -z "$input" ]; then
			fail "no valid input '$input'"
			return 1
		fi
		echo "input: $input"
	else
		# perl -ne 'print'
		while read -r line; do
			echo $line
		done
	fi
}

main() {
	local argnum="$1"
	shift

	if [ $# -eq $argnum ]; then
        usage
		info "not enough args"
	fi

	while [ $# -gt 0 ]; do
		case "${1:-}" in
		-h | --help)
			perl -ne 'print "$1\n" if /^\s*#+\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
			exit 1
			;;
		*) break ;;
		esac
		shift
	done
}

### Modulino

if [ -z "${MAINSCRIPT:-}" ]; then
	MAINSCRIPT="$(abspath "$0")"
	if [ -t 0 ]; then
		main 0 "${@}"
	else
		die "Err: cannot run as part of a pipe ..."
	fi
	utils_template__init "${MAINSCRIPT%/*}" || die 'Abort init ...'
	utils_template__run "$@" || die 'Abort run ...'
else
	utils_template__init "${MAINSCRIPT%/*}" || {
		fail 'could not run init'
		return 1
	}
fi
