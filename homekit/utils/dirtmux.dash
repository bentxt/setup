#!/bin/sh
#
# NAME
#
#   pwdtmux - have other tmux sessions jump to a window in PWD
#
# DESCRIPTION
#
#   This is about tmux sessions that exists and are named in reference to a pwd
#
# SYNOPSIS
#
#   pwdtmux <session name> <cmd> [dir]
#
# OPTIONS
#
#   --help          show help

set -u

[ -z ${DEBUG+x} ] && DEBUG=

UTILS_DIRTMUX__HOMEDIR=


utils_dirtmux__init() {
	local maindir="${1:-}"
	if [ -d "${maindir}" ]; then
        for inc in 'tmuxutil.dash' 'libio.sh'; do
            . "$maindir/$inc" || {
                fail "could not incluce '$inc'"
                return 1
            }
        done
    else
		fail "invalid maindir  '${maindir}'"
		return 1
	fi

    UTILS_DIRTMUX__HOMEDIR="${XDG_STATE_HOME:-$HOME/.local/state}/utils_dirtmux"

}

utils_dirtmux__run() {

	while [ $# -gt 0 ]; do
		case "$1" in
		-*)
			info "invalid arg '$1', run --help"
			return 1
			;;
		*) break ;;
		esac
		shift
	done

    local cmd="${1:-}"
    local sessname="${2:-}"
    local dir="${3:-}"

    if [ -z "$cmd" ] ; then
        fail no cmd 
        return 1
    fi

    if [ -z "$sessname" ] ; then
        fail no session name
        return 1
    fi

    [ -z "$dir" ]  && dir="$PWD"

    local absdir=; absdir="$(abspath "$dir")"

    if ! [ -d "$absdir" ]; then
        fail "dir '$absdir' from '$dir' invalid"
        return 1
    fi


    case "$cmd" in
        set) utils_dirtmux__set "$sessname" "$absdir" ;;
        get)
            die 'todo'
            ;;
        *)
            fail no valid cmd
            return 1
            ;;
    esac

}

utils_dirtmux__set() {
    local sessname="${1:-}"
    if [ -z "$sessname" ] ; then
        fail no sessnaem
        return 1
    fi
    local dir="${2:-}"
    if [ -z "$dir" ] ; then
        fail no dir 
        return 1
    fi


    local dir_name=; dir_name="$(basename "$dir")"
    if [ -z "$dir_name" ] ; then
        fail "no pwd name $dir_name'"
        return 1
    fi

    if [ -z "$UTILS_DIRTMUX__HOMEDIR" ] ; then
        fail no UTILS_DIRTMUX__HOMEDIR 
        return 1
    fi

    local dir_id=; dir_id="$(utils_libio__inode_dir "$dir")"

    local tmux_win_name="${dir_id}--${dir_name}"

    mkdir -p "$UTILS_DIRTMUX__HOMEDIR" 
    local dir_id_file=; 
    dir_id_file="$(utils_libio__save_file_contents "$UTILS_DIRTMUX__HOMEDIR" "$tmux_win_name" "$dir")"

    if ! [ -f "$dir_id_file" ] ; then
        fail "could not create state file out of tmux_win_name '$tmux_win_name' in '$dir_id_file'"
        return 1
    fi

    utils_tmuxutil__run 'new'  "$sessname" "$tmux_win_name" "$dir"
}

### Prelude

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
warn() { echo "Warn: $*" >&2; }
info() { echo "$@" >&2; }

die() {
	echo "$@" >&2
	exit 1
}
abspath() {
	readlink -f "${1:-}" 2>/dev/null || {
		perl -MCwd=abs_path -e 'print abs_path($ARGV[0]);' "${1:-}"
	}
}

usage() {
    info "wrong number of arguments"
	for regex in 's/^#+\s*//g; if($_ && $s){print "usage: $_"; exit 0; };  $s=1 if (/^SYNOPSIS\s*$/);' 'if (/^\s*#+\s*([uU]sage[a-z\s-_]*:.*)\s*/){print "$1"; $s=1; exit 0 ; };'; do
		perl -ne "${regex}"';END{exit 1 unless $s;}' "$0" >&2 
	done
    exit 1
}

timestamp() { date +'%Y%m%d%H%M%S'; }
getos() { uname | tr '[:upper:]' '[:lower:]'; }
getlines() { wc -l <"${1:-}" | tr -d ' '; }
newpath() { case "$1" in */*) prn "${1%/*}/$2" ;; *) prn "$2" ;; esac }
newpathext() { newpath "$1" "$(basename "$1" "${1##*.}")$2"; }

main() {
	local argnum="$1"
	shift

	[ $# -eq $argnum ] && usage

    local arg
    for arg in $@ ; do
        case "${arg}" in
            -h | --help)
                perl -ne 'print "$1\n" if /^\s*#+\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
                exit 1
                ;;
            *) : ;;
        esac
    done
}

### Modulino

if [ -z "${MAINSCRIPT:-}" ]; then
	MAINSCRIPT="$(abspath "$0")"
    [ -z "$MAINSCRIPT" ] && die "Err: could not set MAINSCRIPT"
	if [ -t 0 ]; then
		main 0 "${@}"
	else
		die "Err: cannot run as part of a pipe ..."
	fi
	utils_dirtmux__init "${MAINSCRIPT%/*}" || die 'Abort init ...'
	utils_dirtmux__run "$@" || die 'Abort run ...'
else
	utils_dirtmux__init "${MAINSCRIPT%/*}" || {
		fail 'could not run init'
		return 1
	}
fi

