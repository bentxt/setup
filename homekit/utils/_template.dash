#!/bin/sh
#
# NAME
#
#   template - Template for shell scripts
#
# DESCRIPTION
#
#   Shell scripts that also can be used as modules/libraries for other scripts.
#   Fully posix compatible
#
#
# SYNOPSIS
#
#   template [OPTIONS] [filename], or run with --help
#
# OPTIONS
#
#   --help          show help

set -u

[ -z ${DEBUG+x} ] && DEBUG=

INFO=1

UTILS_TEMPLATE__MAINLIBS='tmuxutil.dash libio.sh'

UTILS_TEMPLATE__CACHEDIR=

UTILS_TEMPLATE__NAG_LEVEL=


utils_template__init(){
    local maindir="${1:-}"

    local cache_home="${XDG_CACHE_HOME:-$HOME/.cache}"
    if [ -d "$cache_home" ] ; then
        UTILS_TEMPLATE__CACHEDIR="$cache_home/utils_template"
    else
        fail "There is no cache home in '$cache_home'"
        return 1
    fi

    if [ -d "${maindir}" ]; then
        local lib
        for lib in ${UTILS_TEMPLATE__MAINLIBS} ; do
            if [ -f "$maindir/$lib" ] ; then
                . "$maindir/$lib" || {
                    fail "could not incluce '$maindir/$lib'"
                    return 1
                }
            else
                fail "could not find library include '$maindir/$lib'"
                return 1
            fi
        done
    else
        fail "invalid maindir  '${maindir}'"
        return 1
    fi
}


utils_template__run() {

	while [ $# -gt 0 ]; do
		case "$1" in
		-*)
			fail "invalid arg '$1', run --help"
			return 1
			;;
		*) break ;;
		esac
		shift
	done

	local input="${1:-}"


	if [ -t 0 ]; then
		if [ -z "$input" ]; then
			fail "no input"
			return 1
		fi
		echo "input: $input"
	    echo newpath $(newpath $input 'lol')
    	echo newpathext $(newpathext $input '.ext')
	else
		# perl -ne 'print'
		while read -r line; do
			echo $line
		done
	fi
}

### Prelude

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
warn() { echo "Warn: $*" >&2; }
info() { [ -n "$INFO" ] && echo "$*" >&2; }

timestamp() { date +'%Y%m%d%H%M%S'; }
getos() { uname | tr '[:upper:]' '[:lower:]'; }
getlines() { wc -l <"${1:-}" | tr -d ' '; }
newpath() { case "$1" in */*) prn "${1%/*}/$2" ;; *) prn "$2" ;; esac }
newpathext() { newpath "$1" "$(basename "$1" "${1##*.}")$2"; }

die() {
	echo "$@" >&2
	exit 1
}
abspath() {
	readlink -f "${1}" 2>/dev/null || {
		perl -MCwd=abs_path -e 'print abs_path($ARGV[0]);' "${1}"
	}
}

usage() {
    info "not enough arguments"
	for regex in 's/^#+\s*//g; if($_ && $s){print "usage: $_"; exit 0; };  $s=1 if (/^SYNOPSIS\s*$/);' 'if (/^\s*#+\s*([uU]sage[a-z\s-_]*:.*)\s*/){print "$1"; $s=1; exit 0 ; };'; do
		perl -ne "${regex}"';END{exit 1 unless $s;}' "$0" >&2 && exit 1
	done
    exit 1
}

main() {
	local argnum="$1"
	shift

	[ $# -eq $argnum ] && usage

    local arg
    for arg in "$@" ; do
        case "${arg}" in
            -h | --help)
                perl -ne 'print "$1\n" if /^\s*#+\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
                exit 1
                ;;
            *) : ;;
        esac
    done
}

### Modulino

if [ -z "${MAINSCRIPT:-}" ]; then
	MAINSCRIPT="$(abspath "$0")"
    [ -z "$MAINSCRIPT" ] && die "Err: could not set MAINSCRIPT"
	if [ -t 0 ]; then
		main -1 "${@}"
	else
		die "Err: cannot run as part of a pipe ..."
	fi
	utils_template__init "${MAINSCRIPT%/*}" || die 'Abort init ...'
	utils_template__run "$@" || die 'Abort run ...'
else
	utils_template__init "${MAINSCRIPT%/*}" || {
		fail 'could not run init'
		return 1
	}
fi
